z <- x(4,7,9,8)
z <- (4,7,9,8)
z = [-1:-2]
x <- list(e=2, f=4)
y <- list (g=6)
z <- list (x,y)
length(z)
seq(2.4,3,length=7)
install.packages("plotrix")
myString <- "Hello, World!"
print(myString)
myString <- "Hello, World!"
print(myString)
ls()
x <- 5
rm(x)
x
old.packages()
x <- "dataset"
typeof(x)
attributes(x)
y <- 1:10
typeof(y)
length(y)
attributes(y)
z <- c(11, 2L, 3L)
typeof(z)
x <- vector()
vector("character", length = 10)
character(5)
numeric(5)
logical(5)
x <- c(1,2,3)
x
length(x)
x1 <- c(1L, 2L, 3L)
y <- c(TRUE, FALSE, TRUE, FALSE)
z <- c("Alan", "Ali", "Joe", "Ben")
typeof(z)
length(z)
class(z)
str(z)
chr[1:2]
z <- c(z, "Anette")
z
x <- c(1 + (0+0i), 2 + (0+4i))
x
series <- 1:10
seq()
seq(10)
seq(1, 10, by=0.1)
1/0
1/Inf
0/0
length(1:10)
nchar("Software Carpentry")
xx <- c(1.7, "a")
xx
typeof(xx)
x <- 0.6
x <- 0:6
identical(x, as.numeric(x))
typeof(x)
typeof(as.numeric(x))
x <- 0:6
as.numeric(x)
as.logical(x)
as.character(x)
as.complex(x)
x <- c("a","b", "c")
as.numeric(x)
as.logical(x)
1 <"2"
"1" > 2
m <- matrix(nrow=2, ncol = 2)
m
dim(m)
m <- matrix(1:6, nrow=2, ncol = 2)
m
m <- 1:10
dim(m) <- c(2, 5)
x <- 1:3
y <- 10:12
cbind(x, y)
rbind(x, y)
mdat <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
x <- list(1, "a", TRUE, 1 + (0+4i))
x
x <- 1:10
x <- as.list(x)
x
length(x)
xlist <- list(a="Ali Nauman", b=1:10, data=head(iris))
xlist
temp <- list(list(list(list())))
temp
is.recursive(temp)
2+10
log(10)
log(10, base=2)
runif(n, min = 0, max = 1)
runif(5, min = 0, max = 1)
rnorm(1000000, mean = 100, sd = 36)
runif(1)
runif(10)
rnorm(1)
rnorm(10)
x <- runif(10)
x[10]
seed(10)
set.seed(10)
rnorm(10)
set.seed(10)
rnorm(10)
set.seed(1811863)
x <- runif(1000)
x[1]
x[1000]
x[99]
hist(x)
hist(x, main="'runif' - Uniform Distribution Histogram",xlab="Value of x")
set.seed(1811863)
y <- rnorm(1000)
y[1]
y[1000]
y[99]
hist(y, main="'rnorm' - Standard Normal Distribution Histogram",xlab="Value of y")
install.packages('mlbench')
data(BreastCancer, package="mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]
bc <- bc[,-1]
View(bc)
View(BreastCancer)
for(i in 1:9) {
bc[, i] <- as.numeric(as.character(bc[, i]))
}
# Change Y values to 1's and 0's
bc$Class <- ifelse(bc$Class == "malignant", 1, 0)
bc$Class <- factor(bc$Class, levels = c(0, 1))
# Prep Training and Test data.
library(caret)
'%ni%' <- Negate('%in%')  # define 'not in' func
options(scipen=999)  # prevents printing scientific notations.
set.seed(100)
trainDataIndex <- createDataPartition(bc$Class, p=0.7, list = F)
trainData <- bc[trainDataIndex, ]
testData <- bc[-trainDataIndex, ]
library(caret)
install.packages('caret')
library(caret)
'%ni%' <- Negate('%in%')
options(scipen=999)
set.seed(100)
trainDataIndex <- createDataPartition(bc$Class, p=0.7, list = F)
trainData <- bc[trainDataIndex, ]
testData <- bc[-trainDataIndex, ]
install.packages('numDeriv')
library(caret)
install.packages('recipes')
install.packages("recipes")
library(caret)
options(scipen=999)  # prevents printing scientific notations.
set.seed(100)
trainDataIndex <- createDataPartition(bc$Class, p=0.7, list = F)
# Load data
# install.packages('mlbench')
data(BreastCancer, package="mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # keep complete rows
# remove id column
bc <- bc[,-1]
# convert to numeric
for(i in 1:9) {
bc[, i] <- as.numeric(as.character(bc[, i]))
}
# Change Y values to 1's and 0's
bc$Class <- ifelse(bc$Class == "malignant", 1, 0)
bc$Class <- factor(bc$Class, levels = c(0, 1))
library(caret)
install.packages('recipes')
install.packages("recipes")
library(caret)
install.packages("Matrix")
install.packages('recipes')
install.packages("recipes")
# Load data
# install.packages('mlbench')
data(BreastCancer, package="mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # keep complete rows
setwd("E:/FAST/Semester-II/Data Science Tools & Techniques/Assignments/Assignment-3")
# remove id column
bc <- bc[,-1]
# convert to numeric
for(i in 1:9) {
bc[, i] <- as.numeric(as.character(bc[, i]))
}
# Change Y values to 1's and 0's
bc$Class <- ifelse(bc$Class == "malignant", 1, 0)
bc$Class <- factor(bc$Class, levels = c(0, 1))
library(caret)
'%ni%' <- Negate('%in%')
options(scipen=999)
set.seed(100)
trainDataIndex <- createDataPartition(bc$Class, p=0.7, list = F)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
install.packages("caret", repos = "http://cran.r-project.org", dependencies = c("Depends", "Imports", "Suggests"))
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
# Prep Training and Test data.
library(caret)
'%ni%' <- Negate('%in%')  # define 'not in' func
options(scipen=999)  # prevents printing scientific notations.
set.seed(100)
trainDataIndex <- createDataPartition(bc$Class, p=0.7, list = F)
str(trainDataIndex)
remove.packages("caret")
installed.packages()
library(caret)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library('caret')
install.packages('gtable', dependencies = TRUE)
install.packages("gtable", dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
library('caret')
install.packages('recipes', dependencies = TRUE)
install.packages("recipes", dependencies = TRUE)
library('caret')
remove.packages("rlang")
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("recipes", dependencies = TRUE)
remove.packages("rlang")
remove.packages("recipes")
install.packages("recipes", dependencies = TRUE)
remove.packages("recipes")
install.packages("recipes", dependencies = TRUE)
install.packages("recipes")
remove.packages("recipes")
library(caret)
install.packages("https://cran.r-project.org/src/contrib/Archive/recipes/recipes_0.1.6.tar.gz", repo=NULL, type="source")
remove.packages("recipes")
library(caret)
install.packages("https://cloud.r-project.org/package=rlang", repo=NULL, type="source")
install.packages("C:/Users/alina/AppData/Local/Temp/RtmpaiWFXs/downloaded_packages/rlang_0.4.0.tar", repo=NULL, type="source")
install.packages("rlang")
install.packages("rlang")
install.packages("recipes")
install.packages("rlang")
remove.packages("rlang")
install.packages("recipes", repo = "https://lib.ugent.be/CRAN/")
